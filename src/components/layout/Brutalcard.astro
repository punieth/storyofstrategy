---
interface Props {
    tone?:
        | "hero"
        | "bridge"
        | "principles"
        | "vision"
        | "case"
        | "case-note"
        | "profile"
        | "profile-note"
        | "profile-engineer"
        | "profile-builder"
        | "profile-next"
        | "neutral"
        | "red"
        | "orange"
        | "yellow"
        | "blue"
        | "cyan"
        | "green"
        | "black"
        | "gray"
        | "purple"
        | "pink";
    color?: string;
    textColor?: string;
    borderColor?: string;
    shadowColor?: string;
    class?: string;
    [key: string]: any;
}

interface PaletteEntry {
    bg: string;
    text: string;
    border: string;
    shadow: string;
}

const palette: Record<NonNullable<Props["tone"]>, PaletteEntry> = {
    hero: {
        bg: "var(--tone-hero-bg)",
        text: "var(--tone-hero-text)",
        border: "var(--tone-hero-border)",
        shadow: "var(--tone-hero-shadow)",
    },
    bridge: {
        bg: "var(--tone-bridge-bg)",
        text: "var(--tone-bridge-text)",
        border: "var(--tone-bridge-border)",
        shadow: "var(--tone-bridge-shadow)",
    },
    principles: {
        bg: "var(--tone-principles-bg)",
        text: "var(--tone-principles-text)",
        border: "var(--tone-principles-border)",
        shadow: "var(--tone-principles-shadow)",
    },
    vision: {
        bg: "var(--tone-vision-bg)",
        text: "var(--tone-vision-text)",
        border: "var(--tone-vision-border)",
        shadow: "var(--tone-vision-shadow)",
    },
    case: {
        bg: "var(--tone-case-bg)",
        text: "var(--tone-case-text)",
        border: "var(--tone-case-border)",
        shadow: "var(--tone-case-shadow)",
    },
    "case-note": {
        bg: "var(--tone-case-sub-bg)",
        text: "var(--tone-case-sub-text)",
        border: "var(--tone-case-sub-border)",
        shadow: "var(--tone-case-sub-shadow)",
    },
    profile: {
        bg: "var(--tone-profile-bg)",
        text: "var(--tone-profile-text)",
        border: "var(--tone-profile-border)",
        shadow: "var(--tone-profile-shadow)",
    },
    "profile-note": {
        bg: "var(--tone-profile-engineer-bg)",
        text: "var(--tone-profile-engineer-text)",
        border: "var(--tone-profile-engineer-border)",
        shadow: "var(--tone-profile-engineer-shadow)",
    },
    "profile-engineer": {
        bg: "var(--tone-profile-engineer-bg)",
        text: "var(--tone-profile-engineer-text)",
        border: "var(--tone-profile-engineer-border)",
        shadow: "var(--tone-profile-engineer-shadow)",
    },
    "profile-builder": {
        bg: "var(--tone-profile-builder-bg)",
        text: "var(--tone-profile-builder-text)",
        border: "var(--tone-profile-builder-border)",
        shadow: "var(--tone-profile-builder-shadow)",
    },
    "profile-next": {
        bg: "var(--tone-profile-next-bg)",
        text: "var(--tone-profile-next-text)",
        border: "var(--tone-profile-next-border)",
        shadow: "var(--tone-profile-next-shadow)",
    },
    neutral: {
        bg: "var(--tone-neutral-bg)",
        text: "var(--tone-neutral-text)",
        border: "var(--tone-neutral-border)",
        shadow: "var(--tone-neutral-shadow)",
    },
    red: {
        bg: "var(--tone-hero-bg)",
        text: "var(--tone-hero-text)",
        border: "var(--tone-hero-border)",
        shadow: "var(--tone-hero-shadow)",
    },
    orange: {
        bg: "var(--tone-bridge-bg)",
        text: "var(--tone-bridge-text)",
        border: "var(--tone-bridge-border)",
        shadow: "var(--tone-bridge-shadow)",
    },
    yellow: {
        bg: "var(--tone-principles-bg)",
        text: "var(--tone-principles-text)",
        border: "var(--tone-principles-border)",
        shadow: "var(--tone-principles-shadow)",
    },
    blue: {
        bg: "var(--tone-vision-bg)",
        text: "var(--tone-vision-text)",
        border: "var(--tone-vision-border)",
        shadow: "var(--tone-vision-shadow)",
    },
    cyan: {
        bg: "var(--tone-case-bg)",
        text: "var(--tone-case-text)",
        border: "var(--tone-case-border)",
        shadow: "var(--tone-case-shadow)",
    },
    green: {
        bg: "var(--tone-case-sub-bg)",
        text: "var(--tone-case-sub-text)",
        border: "var(--tone-case-sub-border)",
        shadow: "var(--tone-case-sub-shadow)",
    },
    black: {
        bg: "var(--tone-profile-bg)",
        text: "var(--tone-profile-text)",
        border: "var(--tone-profile-border)",
        shadow: "var(--tone-profile-shadow)",
    },
    gray: {
        bg: "var(--tone-neutral-bg)",
        text: "var(--tone-neutral-text)",
        border: "var(--tone-neutral-border)",
        shadow: "var(--tone-neutral-shadow)",
    },
    purple: {
        bg: "var(--tone-profile-next-bg)",
        text: "var(--tone-profile-next-text)",
        border: "var(--tone-profile-next-border)",
        shadow: "var(--tone-profile-next-shadow)",
    },
    pink: {
        bg: "var(--tone-profile-builder-bg)",
        text: "var(--tone-profile-builder-text)",
        border: "var(--tone-profile-builder-border)",
        shadow: "var(--tone-profile-builder-shadow)",
    },
};

// Helper function to determine if color is light or dark
function isLightColor(hexColor: string): boolean {
    const hex = hexColor.replace('#', '');
    const r = parseInt(hex.substr(0, 2), 16);
    const g = parseInt(hex.substr(2, 2), 16);
    const b = parseInt(hex.substr(4, 2), 16);
    const brightness = (r * 299 + g * 587 + b * 114) / 1000;
    return brightness > 128;
}

// Helper function to darken a color
function darkenColor(hexColor: string, percent: number): string {
    const hex = hexColor.replace('#', '');
    const r = Math.max(0, parseInt(hex.substr(0, 2), 16) * (1 - percent / 100));
    const g = Math.max(0, parseInt(hex.substr(2, 2), 16) * (1 - percent / 100));
    const b = Math.max(0, parseInt(hex.substr(4, 2), 16) * (1 - percent / 100));
    return `#${Math.round(r).toString(16).padStart(2, '0')}${Math.round(g).toString(16).padStart(2, '0')}${Math.round(b).toString(16).padStart(2, '0')}`;
}

const {
    tone = "hero",
    color,
    textColor: customTextColor,
    borderColor: customBorderColor,
    shadowColor: customShadowColor,
    class: className = "",
    ...rest
} = Astro.props as Props;

const { bg: toneBg, text: toneText, border: toneBorder, shadow: toneShadow } = palette[tone];

// Determine final colors
const bg = color ? color.toLowerCase() : toneBg;

// Auto-determine text color if not provided
const textColor = customTextColor ?? (color ? (isLightColor(color) ? '#111827' : '#ffffff') : toneText);

// Auto-determine border color if not provided
const borderColor = customBorderColor ?? (color ? darkenColor(color, 20) : toneBorder);

// Auto-determine shadow color if not provided
const shadowColor = customShadowColor ?? (color ? darkenColor(color, 40) : toneShadow);
---

<style define:vars={{ bg, borderColor, shadowColor, textColor }}>
    .brutal-card {
        position: relative;
        background-color: var(--bg);
        color: var(--textColor);
        border-radius: 0.5rem;
        border: 2px solid var(--borderColor);
        filter: drop-shadow(4px 4px 0 var(--shadowColor));
        box-shadow: none; /* Default to no box-shadow */
        transition: filter 0.2s ease, transform 0.2s ease, box-shadow 0.2s ease;
        transform: translateY(0);
        padding: clamp(1.25rem, 1.5vw + 1rem, 1.75rem);
    }

    .brutal-card:hover {
        filter: drop-shadow(2px 2px 0 var(--shadowColor));
        transform: translateY(-2px);
    }

    /* iOS stability: use box-shadow instead of filter */
    @supports (-webkit-touch-callout: none) {
        .brutal-card {
            filter: none;
            box-shadow: 4px 4px 0 var(--shadowColor);
            -webkit-transform: translateZ(0);
            backface-visibility: hidden;
        }
        .brutal-card:hover {
            filter: none;
            box-shadow: 2px 2px 0 var(--shadowColor);
        }
    }

    .brutal-card.is-subtle {
        filter: drop-shadow(2px 2px 0 var(--shadowColor));
        padding: clamp(1.125rem, 1.25vw + 0.875rem, 1.5rem);
    }

    .brutal-card.is-flat {
        filter: none;
        padding: clamp(1rem, 1vw + 0.75rem, 1.375rem);
    }

    /* Make links inherit contrast inside dark cards */
    .brutal-card a {
        color: inherit;
    }

    /* iOS stability */
    @supports (-webkit-touch-callout: none) {
        .brutal-card {
            -webkit-transform: translateZ(0);
            backface-visibility: hidden;
        }
    }
</style>

<div class={`brutal-card tone-${tone} ${className}`} data-tone={tone} {...rest}>
    <slot />
</div>
