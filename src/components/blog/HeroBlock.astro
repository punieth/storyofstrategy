---
const tones = {
    lime: { bar: "#d9ff6a" },
    blue: { bar: "#60a5fa" },
    violet: { bar: "#c084fc" },
    peach: { bar: "#fb923c" },
} as const;

type Tone = keyof typeof tones;

interface Props {
    kicker?: string;
    title: string;
    tagline?: string;
    as?: "h1" | "h2";
    tone?: Tone; // <-- key change
}

const {
    kicker = "",
    title,
    tagline = "",
    as = "h1",
    tone = "lime",
} = Astro.props as Props;

const bar = tones[tone].bar; // <-- now type-safe
const Tag = as;
---

<section class="nb-box nb-hero">
    {kicker && <span class="kicker">{kicker}</span>}
    <Tag class="nb-title">{title}</Tag>
    {tagline && <p class="nb-tagline">{tagline}</p>}
    <div class="bar" style={`--bar:${bar}`}></div>
</section>

<style>
    .nb-box {
        background: #fff;
        border: 4px solid #000;
        border-radius: 12px;
        padding: 1.25rem 1rem;
        box-shadow: 8px 8px 0 #000;
    }
    .nb-hero {
        padding: 1.5rem 1.25rem;
    }
    .kicker {
        display: inline-block;
        background: #000;
        color: #fff;
        border: 2px solid #000;
        padding: 2px 8px;
        font-size: 0.72rem;
        text-transform: uppercase;
        letter-spacing: 0.06em;
    }
    .nb-title {
        font-weight: 800;
        font-size: clamp(1.9rem, 3.2vw, 2.6rem);
        line-height: 1.15;
        margin: 0.35rem 0 0.25rem;
    }
    .nb-tagline {
        color: #222;
        opacity: 0.85;
        font-size: clamp(0.98rem, 1.6vw, 1.1rem);
        margin: 0;
    }
    .bar {
        height: 10px;
        width: min(240px, 45%);
        background: var(--bar);
        border: 2px solid #000;
        border-radius: 8px;
        box-shadow: 3px 3px 0 #000;
        margin-top: 0.6rem;
    }
</style>
